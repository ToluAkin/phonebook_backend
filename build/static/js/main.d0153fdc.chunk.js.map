{"version":3,"sources":["services/persons.js","components/Person.js","components/PersonForm.js","components/Filter.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","queries","getAll","axios","get","then","response","data","create","newObject","post","update","id","put","remove","delete","Person","props","names","persons","map","person","index","name","number","data-id","onClick","handleDelete","PersonForm","onSubmit","handleSubmit","value","copyNewName","onChange","handleNameChange","copyNewNumber","handleNumberChange","type","Filter","copyFindName","handleFindNameChange","Notification","displayedMessage","message","className","includes","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","findName","setFindName","errorMessage","setErrorMessage","copyPersons","useEffect","personService","e","root","document","querySelectorAll","target","forEach","item","matched","innerHTML","toLowerCase","style","display","preventDefault","checkData","filter","newPerson","length","personId","window","confirm","thisPerson","catch","error","console","log","setTimeout","concat","getAttribute","toRemove","find","newPersons","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d0153fdc.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = 'https://fullstackopen-phone-book-api.herokuapp.com/api/persons'\n\n// get all persons\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\n// save data of a person\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\n// update the data of a person\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\n// delete the data of a person\nconst remove = id => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nconst queries = {\n    getAll,\n    create,\n    update,\n    remove\n}\n\nexport default queries","import React from 'react'\n\nconst Person = props => {\n    let names = props.persons.map((person, index) =>\n        <li key={index}>{person.name} {person.number} <button data-id={ person.id } onClick={props.handleDelete}>delete</button></li>\n    )\n    return (\n        <ul>\n            { names }\n        </ul>\n        \n    )\n}\n\nexport default Person","import React from 'react'\n\nconst PersonForm = props => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                name: <input value={props.copyNewName} onChange={props.handleNameChange} />\n            </div>\n            <div>\n                number: <input value={props.copyNewNumber} onChange={props.handleNumberChange} />\n            </div>\n            <div>\n                <button type=\"submit\">add</button>\n            </div>\n        </form>\n    )\n}\n\nexport default PersonForm","import React from 'react'\n\nconst Filter = props => {\n    return (\n        <div>\n            filter shown with\n            <input value={props.copyFindName} onChange={props.handleFindNameChange} />\n        </div>\n    )\n}\n\nexport default Filter","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) return null\n    let displayedMessage;\n    if (message) displayedMessage = <p className={message.includes('Added') ? 'success' : 'error'}>{message}</p>\n    \n    return (\n        <div>{displayedMessage}</div>\n    )\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\nimport Person from './components/Person'\nimport PersonForm from './components/PersonForm'\nimport Filter from './components/Filter'\nimport Notification from './components/Notification'\n\nconst App = () => {\n    const [ persons, setPersons ] = useState([]) \n    const [ newName, setNewName ] = useState('')\n    const [ newNumber, setNewNumber ] = useState('')\n    const [ findName, setFindName ] = useState('')\n    const [ errorMessage, setErrorMessage ] = useState('')\n    \n    let copyNewName = newName\n    let copyPersons = persons\n    let copyNewNumber = newNumber\n    let copyFindName = findName\n\n    // useEffect to get all the persons\n    useEffect(() => {\n        personService.getAll()\n            .then(response => {\n            setPersons(response)\n        })\n    }, [])\n\n    /**\n     * handleSubmit validates data when submission is done\n     * @param {event} e \n     */\n    const handleSubmit = e => {\n        e.preventDefault()\n\n        let checkData = copyPersons.filter(person => {\n            // eslint-disable-next-line\n            return person.name == copyNewName;\n        })\n        let newPerson = { name: copyNewName, number: copyNewNumber }\n        \n        if (!checkData.length) {\n            personService.create(newPerson)\n                .then(response => {\n                    setPersons(copyPersons.concat(response))\n                    setNewName('')\n                    setNewNumber('')\n            })\n            \n        } else {\n            const personId = checkData[0].id\n            const updateAction = window.confirm(`${copyNewName} is already in the phone book, replace the old number with a new one`)\n            if (updateAction) {\n                personService.update(personId, newPerson)\n                    .then(response => {\n                        setPersons(copyPersons.map(thisPerson => thisPerson.id !== personId ? thisPerson : response))\n                    })\n                    .catch(error => {\n                        console.log(error);\n                        setErrorMessage(`Information of ${copyNewName} has already been removed from the server`)\n                        setTimeout(() => {\n                            setErrorMessage(null)\n                        }, 5000);\n                        setPersons(copyPersons.filter(person => person.id !== personId))\n                        setNewName('')\n                        setNewNumber('')\n                    })\n            }\n        }\n\n        setErrorMessage(`Added ${copyNewName}`)\n        setTimeout(() => {\n            setErrorMessage(null)\n        }, 5000);\n    }\n\n    /**\n     * Handle Delete removes a person's data\n     * @param {event} e \n     */\n    const handleDelete = e => {\n        const id = e.target.getAttribute('data-id')\n        // eslint-disable-next-line eqeqeq\n        const toRemove = copyPersons.find(thisPerson => thisPerson.id == id)\n        // eslint-disable-next-line eqeqeq\n        const newPersons = copyPersons.filter(person => person.id != id)\n\n        const deleteAction = window.confirm(`Delete ${toRemove.name} ?`)\n        if (deleteAction) {\n            personService.remove(id)\n            .then(response => {\n                setPersons(newPersons)\n            })\n        }\n    }\n    \n    /**\n     * handleNameChange sets the value of the input field to the name\n     * @param {event} e \n     */\n    const handleNameChange = e => {\n        setNewName(e.target.value)\n    }\n\n    /**\n     * handleNumberChange sets the value of the number field to the name\n     * @param {event} e \n     */\n    const handleNumberChange = e => {\n        setNewNumber(e.target.value)\n    }\n\n    /**\n     * Search handles the filtering of names to be displayed\n     * @param {event} e \n     */\n    const handleFindNameChange = e => {\n        let root = document.querySelectorAll('li')\n        setFindName(e.target.value)\n        root.forEach(item => {\n            let matched = item.innerHTML.toLowerCase().includes(copyFindName)\n            if (matched) {\n                item.style.display = ''\n            } else {\n                item.style.display = 'none'\n            }\n        })\n    }\n\n    return (\n        <div>\n            <Filter\n                copyFindName={copyFindName}\n                handleFindNameChange={handleFindNameChange}\n            />\n\n            <h2>Phone book</h2>\n            <Notification message={errorMessage} />\n            <PersonForm\n                copyNewName={copyNewName}\n                copyNewNumber={copyNewNumber}\n                handleSubmit={handleSubmit}\n                handleNameChange={handleNameChange}\n                handleNumberChange={handleNumberChange}\n            />\n            \n            <h2>Numbers</h2>\n            <Person persons={copyPersons} handleDelete={handleDelete} />\n        </div>\n    )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n\t<App />,\n\tdocument.getElementById('root')\n);\n\n"],"sourceRoot":""}